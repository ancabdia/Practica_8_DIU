/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package es.ulpgc.dis.practica8;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyVetoException;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;

/**
 *
 * @author Andres
 */
public class main extends javax.swing.JFrame {

    private File file;

    private FileNameExtensionFilter filtro;

    private JFileChooser fc = new JFileChooser();
    int desktopX;
    int desktopY;

    /**
     * Creates new form main
     */
    public main() {

        nu.pattern.OpenCV.loadShared();
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);

        this.setPreferredSize(new Dimension(1024, 768));

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                if (JOptionPane.showConfirmDialog(rootPane, "Would you like to close the app?", "Close application", JOptionPane.YES_NO_OPTION) == 0) {
                    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                } else {
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                }
            }
        });
        initComponents();
        setLocationRelativeTo(null);
        desktopX = desktop.getWidth();
        desktopY = desktop.getHeight();
        desktop.addComponentListener(new ComponentListener() {

            @Override
            public void componentResized(ComponentEvent e) {

                double copyX = (double) desktop.getWidth() / (double) desktopX;
                double copyY = (double) desktop.getHeight() / (double) desktopY;

                for (Component comp : desktop.getComponents()) {
                    comp.setLocation((int) (comp.getLocation().getX() * copyX), (int) (comp.getLocation().getY() * copyY));
                }
                desktopX = desktop.getWidth();
                desktopY = desktop.getHeight();
            }

            @Override
            public void componentMoved(ComponentEvent e) {
                return;
            }

            @Override
            public void componentShown(ComponentEvent e) {
                return;
            }

            @Override
            public void componentHidden(ComponentEvent e) {
                return;
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktop = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        open = new javax.swing.JMenuItem();
        close = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        Exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        Threshold = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        About = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PanelDesktop");
        setMinimumSize(null);

        jMenu1.setText("File");

        open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        open.setText("Open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        jMenu1.add(open);

        close.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        close.setText("Close");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });
        jMenu1.add(close);
        jMenu1.add(jSeparator1);

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        Threshold.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        Threshold.setText("Threshold Filter");
        Threshold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThresholdActionPerformed(evt);
            }
        });
        jMenu2.add(Threshold);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        About.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        About.setText("About");
        About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutActionPerformed(evt);
            }
        });
        jMenu3.add(About);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktop, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktop, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ThresholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThresholdActionPerformed
        if (file != null) {
            String value = JOptionPane.showInputDialog("Introduce threshold");
            try {
                int valor = Integer.parseInt(value);
                if (valor <= 255 && valor >= 0) {
                    InternalWindow internal = new InternalWindow();

                    internal.setWindowImage(file);
                    internal.setWindowThreshold(valor, file);

                    internal.setVisible(true);
                    desktop.add(internal);

                    internal.setSelected(true);
                    internal.setToolTipText(file.getName() + " thresholding applied with value: " + valor);

                    JOptionPane.showMessageDialog(rootPane, "Procces of threshold finished", "Finished threshold", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Invalid Value", "Value must be 0-255", JOptionPane.ERROR_MESSAGE);
                    ThresholdActionPerformed(evt);
                }
            } catch (NumberFormatException e) {

            } catch (PropertyVetoException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Your must open an image, in order to edit", "No image load", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ThresholdActionPerformed


    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        if (JOptionPane.showConfirmDialog(rootPane, "Would you like to close the app?", "Close application", JOptionPane.YES_NO_OPTION) == 0)
            System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        filtro = new FileNameExtensionFilter("Imagen", "jpg", "jpeg");
        fc.addChoosableFileFilter(filtro);
        int res = fc.showOpenDialog(null);

        InternalWindow internal = new InternalWindow();

        if (res == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            if (file != null) {
                JInternalFrame[] windows = desktop.getAllFrames();
                for (JInternalFrame window : windows) {
                    window.dispose();
                }
            }

            this.file = f;

            internal.setWindowImage(f);
            internal.setVisible(true);
            internal.setToolTipText("File open: " + file.getName());
            desktop.add(internal);
            
            JOptionPane.showMessageDialog(rootPane, "Image open properly", "Open image", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_openActionPerformed

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(rootPane, "Would you like to close the file and all open windows?", "Close file", JOptionPane.YES_NO_OPTION) == 0) {
            JInternalFrame[] windows = desktop.getAllFrames();
            for (JInternalFrame internal : windows) {
                internal.dispose();
            }
        }
    }//GEN-LAST:event_closeActionPerformed

    private void AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionPerformed
        JOptionPane.showMessageDialog(rootPane,
                "This app allows to open images, apply the Threshold filter to it and compare filtered images with teh original."
                + "\nHow to use it:\n"
                + "\t 1- Using the menu File (Alt+F) click on Open (Ctrl+O) to load an image."
                + "\n \t \t \t \t WARNING: Image must be maximum of 1024x768 pixels."
                + "\n \n"
                + "\t 2- You can apply a Threshold filter to the image by, going to menu Edit (Alt+E) by using (Ctrl+F)."
                + "\n \t \t \t You will need to introduce a value between 0 and 255."
                + "\n \n"
                + "\t 3- You can exit the program by using the menu File (Alt+F) and the option Exit (ESC)."
                + "\n \n"
                + "\t You can view more info. on the link: " + "https://github.com/ancabdia/Practica_8_DIU.git",
                "Help information", JOptionPane.INFORMATION_MESSAGE
        );
    }//GEN-LAST:event_AboutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem About;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem Threshold;
    private javax.swing.JMenuItem close;
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem open;
    // End of variables declaration//GEN-END:variables
}
